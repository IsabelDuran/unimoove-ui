/**
 * Unimoove API
 * An API for the Unimoove application
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PlaceCreationRequest', 'model/PlaceResponse', 'model/PlaceCategoryChangeRequest', 'model/PlaceIdChangeRequest', 'model/PlaceNameChangeRequest', 'model/PlacePaginatedResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PlaceCreationRequest'), require('../model/PlaceResponse'), require('../model/PlaceCategoryChangeRequest'), require('../model/PlaceIdChangeRequest'), require('../model/PlaceNameChangeRequest'), require('../model/PlacePaginatedResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.UnimooveApi) {
      root.UnimooveApi = {};
    }
    root.UnimooveApi.PlacesApi = factory(root.UnimooveApi.ApiClient, root.UnimooveApi.PlaceCreationRequest, root.UnimooveApi.PlaceResponse, root.UnimooveApi.PlaceCategoryChangeRequest, root.UnimooveApi.PlaceIdChangeRequest, root.UnimooveApi.PlaceNameChangeRequest, root.UnimooveApi.PlacePaginatedResponse);
  }
}(this, function(ApiClient, PlaceCreationRequest, PlaceResponse, PlaceCategoryChangeRequest, PlaceIdChangeRequest, PlaceNameChangeRequest, PlacePaginatedResponse) {
  'use strict';

  /**
   * Places service.
   * @module api/PlacesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new PlacesApi. 
   * @alias module:api/PlacesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPlace operation.
     * @callback module:api/PlacesApi~addPlaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a place
     * Adds a place to the system
     * @param {Object} opts Optional parameters
     * @param {module:model/PlaceCreationRequest} opts.body Place to add
     * @param {module:api/PlacesApi~addPlaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addPlace = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/places', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePLace operation.
     * @callback module:api/PlacesApi~deletePLaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a place
     * @param {String} idPlace By passing in the appropriate place ID, you can delete the place.
     * @param {module:api/PlacesApi~deletePLaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePLace = function(idPlace, callback) {
      var postBody = null;

      // verify the required parameter 'idPlace' is set
      if (idPlace == undefined || idPlace == null) {
        throw "Missing the required parameter 'idPlace' when calling deletePLace";
      }


      var pathParams = {
        'idPlace': idPlace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/places/{idPlace}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlace operation.
     * @callback module:api/PlacesApi~getPlaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds a place
     * @param {String} idPlace By passing in the appropriate place ID, you can get the place.
     * @param {module:api/PlacesApi~getPlaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaceResponse}
     */
    this.getPlace = function(idPlace, callback) {
      var postBody = null;

      // verify the required parameter 'idPlace' is set
      if (idPlace == undefined || idPlace == null) {
        throw "Missing the required parameter 'idPlace' when calling getPlace";
      }


      var pathParams = {
        'idPlace': idPlace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PlaceResponse;

      return this.apiClient.callApi(
        '/places/{idPlace}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyPlaceCategory operation.
     * @callback module:api/PlacesApi~modifyPlaceCategoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the place&#39;s category
     * The place ID for the place you want to modify
     * @param {String} idPlace idPlace
     * @param {Object} opts Optional parameters
     * @param {module:model/PlaceCategoryChangeRequest} opts.body The place&#39;s new category
     * @param {module:api/PlacesApi~modifyPlaceCategoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyPlaceCategory = function(idPlace, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'idPlace' is set
      if (idPlace == undefined || idPlace == null) {
        throw "Missing the required parameter 'idPlace' when calling modifyPlaceCategory";
      }


      var pathParams = {
        'idPlace': idPlace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/places/{idPlace}/category', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyPlaceId operation.
     * @callback module:api/PlacesApi~modifyPlaceIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the place&#39;s ID
     * The place ID for the place you want to modify
     * @param {String} idPlace idPlace
     * @param {Object} opts Optional parameters
     * @param {module:model/PlaceIdChangeRequest} opts.body The place&#39;s new ID
     * @param {module:api/PlacesApi~modifyPlaceIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyPlaceId = function(idPlace, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'idPlace' is set
      if (idPlace == undefined || idPlace == null) {
        throw "Missing the required parameter 'idPlace' when calling modifyPlaceId";
      }


      var pathParams = {
        'idPlace': idPlace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/places/{idPlace}/idPlace', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyPlaceName operation.
     * @callback module:api/PlacesApi~modifyPlaceNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the places&#39;s name
     * The place ID for the place you want to modify
     * @param {String} idPlace idPlace
     * @param {Object} opts Optional parameters
     * @param {module:model/PlaceNameChangeRequest} opts.body The place&#39;s new name
     * @param {module:api/PlacesApi~modifyPlaceNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyPlaceName = function(idPlace, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'idPlace' is set
      if (idPlace == undefined || idPlace == null) {
        throw "Missing the required parameter 'idPlace' when calling modifyPlaceName";
      }


      var pathParams = {
        'idPlace': idPlace
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/places/{idPlace}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPlace operation.
     * @callback module:api/PlacesApi~searchPlaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlacePaginatedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for a place
     * Searches for a place.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name the place to be searched
     * @param {Integer} opts.page the number of the page (default to 0)
     * @param {Integer} opts.size the number of element per page (default to 25)
     * @param {module:api/PlacesApi~searchPlaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlacePaginatedResponse}
     */
    this.searchPlace = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PlacePaginatedResponse;

      return this.apiClient.callApi(
        '/places', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
