/**
 * Unimoove API
 * An API for the Unimoove application
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ReservationCreationRequest', 'model/ReservationPaginatedResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ReservationCreationRequest'), require('../model/ReservationPaginatedResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.UnimooveApi) {
      root.UnimooveApi = {};
    }
    root.UnimooveApi.ReservationsApi = factory(root.UnimooveApi.ApiClient, root.UnimooveApi.ReservationCreationRequest, root.UnimooveApi.ReservationPaginatedResponse);
  }
}(this, function(ApiClient, ReservationCreationRequest, ReservationPaginatedResponse) {
  'use strict';

  /**
   * Reservations service.
   * @module api/ReservationsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ReservationsApi. 
   * @alias module:api/ReservationsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addReservation operation.
     * @callback module:api/ReservationsApi~addReservationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a reservation
     * Adds a new reservation to the system
     * @param {Object} opts Optional parameters
     * @param {module:model/ReservationCreationRequest} opts.body Reservation to add
     * @param {module:api/ReservationsApi~addReservationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addReservation = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reservations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReservation operation.
     * @callback module:api/ReservationsApi~deleteReservationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a reservation
     * @param {String} idReservation By passing in the appropriate reservation ID, you can delete the reservation.
     * @param {module:api/ReservationsApi~deleteReservationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteReservation = function(idReservation, callback) {
      var postBody = null;

      // verify the required parameter 'idReservation' is set
      if (idReservation == undefined || idReservation == null) {
        throw "Missing the required parameter 'idReservation' when calling deleteReservation";
      }


      var pathParams = {
        'idReservation': idReservation
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reservations/{idReservation}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the obtainReservations operation.
     * @callback module:api/ReservationsApi~obtainReservationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReservationPaginatedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtains the trips reserved by the user
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page the number of the page (default to 0)
     * @param {Integer} opts.size the number of element per page (default to 25)
     * @param {module:api/ReservationsApi~obtainReservationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReservationPaginatedResponse}
     */
    this.obtainReservations = function(username, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling obtainReservations";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ReservationPaginatedResponse;

      return this.apiClient.callApi(
        '/users/{username}/reservations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
