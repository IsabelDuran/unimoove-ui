/**
 * Unimoove API
 * An API for the Unimoove application
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CarCreationRequest', 'model/CarBrandChangeRequest', 'model/CarModelChangeRequest', 'model/CarResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CarCreationRequest'), require('../model/CarBrandChangeRequest'), require('../model/CarModelChangeRequest'), require('../model/CarResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.UnimooveApi) {
      root.UnimooveApi = {};
    }
    root.UnimooveApi.CarsApi = factory(root.UnimooveApi.ApiClient, root.UnimooveApi.CarCreationRequest, root.UnimooveApi.CarBrandChangeRequest, root.UnimooveApi.CarModelChangeRequest, root.UnimooveApi.CarResponse);
  }
}(this, function(ApiClient, CarCreationRequest, CarBrandChangeRequest, CarModelChangeRequest, CarResponse) {
  'use strict';

  /**
   * Cars service.
   * @module api/CarsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new CarsApi. 
   * @alias module:api/CarsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addCar operation.
     * @callback module:api/CarsApi~addCarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a car
     * Adds a new car to the user
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {module:model/CarCreationRequest} opts.body Car to add
     * @param {module:api/CarsApi~addCarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addCar = function(username, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling addCar";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/cars', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCar operation.
     * @callback module:api/CarsApi~deleteCarCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a car
     * Deletes the car linked to a user
     * @param {String} plate By passing in the appropriate car plate, you can delete the car.
     * @param {String} username username
     * @param {module:api/CarsApi~deleteCarCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCar = function(plate, username, callback) {
      var postBody = null;

      // verify the required parameter 'plate' is set
      if (plate == undefined || plate == null) {
        throw "Missing the required parameter 'plate' when calling deleteCar";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling deleteCar";
      }


      var pathParams = {
        'plate': plate,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/cars/{plate}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyCarBrand operation.
     * @callback module:api/CarsApi~modifyCarBrandCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the car&#39;s brand
     * @param {String} plate By passing in the appropriate car plate, you can modify the car.
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {module:model/CarBrandChangeRequest} opts.body The car&#39;s new brand
     * @param {module:api/CarsApi~modifyCarBrandCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyCarBrand = function(plate, username, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'plate' is set
      if (plate == undefined || plate == null) {
        throw "Missing the required parameter 'plate' when calling modifyCarBrand";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling modifyCarBrand";
      }


      var pathParams = {
        'plate': plate,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/cars/{plate}/brand', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyCarModel operation.
     * @callback module:api/CarsApi~modifyCarModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the car&#39;s model
     * @param {String} plate By passing in the appropriate car plate, you can modify the car.
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {module:model/CarModelChangeRequest} opts.body The car&#39;s new model
     * @param {module:api/CarsApi~modifyCarModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyCarModel = function(plate, username, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'plate' is set
      if (plate == undefined || plate == null) {
        throw "Missing the required parameter 'plate' when calling modifyCarModel";
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling modifyCarModel";
      }


      var pathParams = {
        'plate': plate,
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/cars/{plate}/model', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchCar operation.
     * @callback module:api/CarsApi~searchCarCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CarResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cars from user
     * Get cars from user
     * @param {String} username username
     * @param {module:api/CarsApi~searchCarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CarResponse>}
     */
    this.searchCar = function(username, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling searchCar";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [CarResponse];

      return this.apiClient.callApi(
        '/users/{username}/cars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
