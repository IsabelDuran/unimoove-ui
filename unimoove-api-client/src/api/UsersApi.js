/**
 * Unimoove API
 * An API for the Unimoove application
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/UserRegistrationRequest', 'model/UserResponse', 'model/UserBirthdateChangeRequest', 'model/UserEmailChangeRequest', 'model/UserGenderChangeRequest', 'model/UserLastnameChangeRequest', 'model/UserNameChangeRequest', 'model/UserPasswordChangeRequest', 'model/UserRoleChangeRequest', 'model/UserUsernameChangeRequest', 'model/UserPaginatedResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/UserRegistrationRequest'), require('../model/UserResponse'), require('../model/UserBirthdateChangeRequest'), require('../model/UserEmailChangeRequest'), require('../model/UserGenderChangeRequest'), require('../model/UserLastnameChangeRequest'), require('../model/UserNameChangeRequest'), require('../model/UserPasswordChangeRequest'), require('../model/UserRoleChangeRequest'), require('../model/UserUsernameChangeRequest'), require('../model/UserPaginatedResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.UnimooveApi) {
      root.UnimooveApi = {};
    }
    root.UnimooveApi.UsersApi = factory(root.UnimooveApi.ApiClient, root.UnimooveApi.UserRegistrationRequest, root.UnimooveApi.UserResponse, root.UnimooveApi.UserBirthdateChangeRequest, root.UnimooveApi.UserEmailChangeRequest, root.UnimooveApi.UserGenderChangeRequest, root.UnimooveApi.UserLastnameChangeRequest, root.UnimooveApi.UserNameChangeRequest, root.UnimooveApi.UserPasswordChangeRequest, root.UnimooveApi.UserRoleChangeRequest, root.UnimooveApi.UserUsernameChangeRequest, root.UnimooveApi.UserPaginatedResponse);
  }
}(this, function(ApiClient, UserRegistrationRequest, UserResponse, UserBirthdateChangeRequest, UserEmailChangeRequest, UserGenderChangeRequest, UserLastnameChangeRequest, UserNameChangeRequest, UserPasswordChangeRequest, UserRoleChangeRequest, UserUsernameChangeRequest, UserPaginatedResponse) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addUser operation.
     * @callback module:api/UsersApi~addUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a user
     * Adds a user to the system
     * @param {Object} opts Optional parameters
     * @param {module:model/UserRegistrationRequest} opts.body User to add
     * @param {module:api/UsersApi~addUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addUser = function(opts, callback) {
     console.log(JSON.stringify(opts));
      opts = opts || {};
      console.log(JSON.stringify(opts));
      var postBody = opts['body'];

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user
     * @param {String} username By passing in the appropriate username, you can delete the user.
     * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteUser = function(username, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling deleteUser";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UsersApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds a user
     * @param {String} username By passing in the appropriate username, you can get the user.
     * @param {module:api/UsersApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    this.getUser = function(username, callback) {
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling getUser";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserResponse;

      return this.apiClient.callApi(
        '/users/{username}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyUserBirthdate operation.
     * @callback module:api/UsersApi~modifyUserBirthdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the user&#39;s birthdate
     * The user username you want to modify
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {module:model/UserBirthdateChangeRequest} opts.body The new user&#39;s birthdate
     * @param {module:api/UsersApi~modifyUserBirthdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyUserBirthdate = function(username, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling modifyUserBirthdate";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/birthdate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyUserEmail operation.
     * @callback module:api/UsersApi~modifyUserEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the user&#39;s email
     * The user username you want to modify
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {module:model/UserEmailChangeRequest} opts.body The new user&#39;s email
     * @param {module:api/UsersApi~modifyUserEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyUserEmail = function(username, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling modifyUserEmail";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/email', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyUserGender operation.
     * @callback module:api/UsersApi~modifyUserGenderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the user&#39;s gender
     * The user username you want to modify
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {module:model/UserGenderChangeRequest} opts.body The new user&#39;s gender
     * @param {module:api/UsersApi~modifyUserGenderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyUserGender = function(username, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling modifyUserGender";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/gender', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyUserLastname operation.
     * @callback module:api/UsersApi~modifyUserLastnameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the user&#39;s lastname
     * The user username you want to modify
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {module:model/UserLastnameChangeRequest} opts.body The new user&#39;s lastname
     * @param {module:api/UsersApi~modifyUserLastnameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyUserLastname = function(username, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling modifyUserLastname";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/lastname', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyUserName operation.
     * @callback module:api/UsersApi~modifyUserNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the user&#39;s name
     * The user username you want to modify
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {module:model/UserNameChangeRequest} opts.body The new user&#39;s name
     * @param {module:api/UsersApi~modifyUserNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyUserName = function(username, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling modifyUserName";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/name', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyUserPassword operation.
     * @callback module:api/UsersApi~modifyUserPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the user&#39;s password
     * The user username you want to modify
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {module:model/UserPasswordChangeRequest} opts.body The new user&#39;s password
     * @param {module:api/UsersApi~modifyUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyUserPassword = function(username, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling modifyUserPassword";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyUserRole operation.
     * @callback module:api/UsersApi~modifyUserRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the user&#39;s role
     * The user username you want to modify
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {module:model/UserRoleChangeRequest} opts.body The new user&#39;s role
     * @param {module:api/UsersApi~modifyUserRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyUserRole = function(username, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling modifyUserRole";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/role', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyUserUsername operation.
     * @callback module:api/UsersApi~modifyUserUsernameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the user&#39;s username
     * The user username you want to modify
     * @param {String} username username
     * @param {Object} opts Optional parameters
     * @param {module:model/UserUsernameChangeRequest} opts.body The new user&#39;s username
     * @param {module:api/UsersApi~modifyUserUsernameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.modifyUserUsername = function(username, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw "Missing the required parameter 'username' when calling modifyUserUsername";
      }


      var pathParams = {
        'username': username
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['*_/_*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{username}/username', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUser operation.
     * @callback module:api/UsersApi~searchUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserPaginatedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for a user
     * Searches for a user. This operation is permited for both user and admin
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page the number of the page (default to 0)
     * @param {Integer} opts.size the number of element per page (default to 25)
     * @param {String} opts.username the username to be searched
     * @param {module:api/UsersApi~searchUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserPaginatedResponse}
     */
    this.searchUser = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'username': opts['username']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = UserPaginatedResponse;

      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
